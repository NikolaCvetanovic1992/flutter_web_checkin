/// Generated file. Do not edit.
///
/// Original: i18n
/// To regenerate, run: `dart run slang`
///
/// Locales: 2
/// Strings: 38 (19 per locale)
///
/// Built on 2024-02-29 at 13:06 UTC

// coverage:ignore-file
// ignore_for_file: type=lint

import 'package:flutter/widgets.dart';
import 'package:slang/api/translation_overrides.dart';
import 'package:slang/builder/model/build_model_config.dart';
import 'package:slang/builder/model/enums.dart';
import 'package:slang/builder/model/node.dart';
import 'package:slang_flutter/slang_flutter.dart';
export 'package:slang_flutter/slang_flutter.dart';

/// Generated by the "Translation Overrides" feature.
/// This config is needed to recreate the translation model exactly
/// the same way as this file was created.
final _buildConfig = BuildModelConfig(
	fallbackStrategy: FallbackStrategy.baseLocaleEmptyString,
	keyCase: null,
	keyMapCase: null,
	paramCase: null,
	stringInterpolation: StringInterpolation.doubleBraces,
	maps: [],
	pluralAuto: PluralAuto.cardinal,
	pluralParameter: 'n',
	pluralCardinal: [],
	pluralOrdinal: [],
	contexts: [],
	interfaces: [], // currently not supported
);

const AppLocale _baseLocale = AppLocale.en;

/// Supported locales, see extension methods below.
///
/// Usage:
/// - LocaleSettings.setLocale(AppLocale.en) // set locale
/// - Locale locale = AppLocale.en.flutterLocale // get flutter locale from enum
/// - if (LocaleSettings.currentLocale == AppLocale.en) // locale check
enum AppLocale with BaseAppLocale<AppLocale, Translations> {
	en(languageCode: 'en', build: Translations.build),
	es(languageCode: 'es', build: _TranslationsEs.build);

	const AppLocale({required this.languageCode, this.scriptCode, this.countryCode, required this.build}); // ignore: unused_element

	@override final String languageCode;
	@override final String? scriptCode;
	@override final String? countryCode;
	@override final TranslationBuilder<AppLocale, Translations> build;

	/// Gets current instance managed by [LocaleSettings].
	Translations get translations => LocaleSettings.instance.translationMap[this]!;
}

/// Method A: Simple
///
/// No rebuild after locale change.
/// Translation happens during initialization of the widget (call of texts).
/// Configurable via 'translate_var'.
///
/// Usage:
/// String a = texts.someKey.anotherKey;
/// String b = texts['someKey.anotherKey']; // Only for edge cases!
Translations get texts => LocaleSettings.instance.currentTranslations;

/// Method B: Advanced
///
/// All widgets using this method will trigger a rebuild when locale changes.
/// Use this if you have e.g. a settings page where the user can select the locale during runtime.
///
/// Step 1:
/// wrap your App with
/// TranslationProvider(
/// 	child: MyApp()
/// );
///
/// Step 2:
/// final texts = Translations.of(context); // Get texts variable.
/// String a = texts.someKey.anotherKey; // Use texts variable.
/// String b = texts['someKey.anotherKey']; // Only for edge cases!
class TranslationProvider extends BaseTranslationProvider<AppLocale, Translations> {
	TranslationProvider({required super.child}) : super(settings: LocaleSettings.instance);

	static InheritedLocaleData<AppLocale, Translations> of(BuildContext context) => InheritedLocaleData.of<AppLocale, Translations>(context);
}

/// Method B shorthand via [BuildContext] extension method.
/// Configurable via 'translate_var'.
///
/// Usage (e.g. in a widget's build method):
/// context.texts.someKey.anotherKey
extension BuildContextTranslationsExtension on BuildContext {
	Translations get texts => TranslationProvider.of(this).translations;
}

/// Manages all translation instances and the current locale
class LocaleSettings extends BaseFlutterLocaleSettings<AppLocale, Translations> {
	LocaleSettings._() : super(utils: AppLocaleUtils.instance);

	static final instance = LocaleSettings._();

	// static aliases (checkout base methods for documentation)
	static AppLocale get currentLocale => instance.currentLocale;
	static Stream<AppLocale> getLocaleStream() => instance.getLocaleStream();
	static AppLocale setLocale(AppLocale locale, {bool? listenToDeviceLocale = false}) => instance.setLocale(locale, listenToDeviceLocale: listenToDeviceLocale);
	static AppLocale setLocaleRaw(String rawLocale, {bool? listenToDeviceLocale = false}) => instance.setLocaleRaw(rawLocale, listenToDeviceLocale: listenToDeviceLocale);
	static AppLocale useDeviceLocale() => instance.useDeviceLocale();
	@Deprecated('Use [AppLocaleUtils.supportedLocales]') static List<Locale> get supportedLocales => instance.supportedLocales;
	@Deprecated('Use [AppLocaleUtils.supportedLocalesRaw]') static List<String> get supportedLocalesRaw => instance.supportedLocalesRaw;
	static void setPluralResolver({String? language, AppLocale? locale, PluralResolver? cardinalResolver, PluralResolver? ordinalResolver}) => instance.setPluralResolver(
		language: language,
		locale: locale,
		cardinalResolver: cardinalResolver,
		ordinalResolver: ordinalResolver,
	);
	static void overrideTranslations({required AppLocale locale, required FileType fileType, required String content}) => instance.overrideTranslations(locale: locale, fileType: fileType, content: content);
	static void overrideTranslationsFromMap({required AppLocale locale, required bool isFlatMap, required Map map}) => instance.overrideTranslationsFromMap(locale: locale, isFlatMap: isFlatMap, map: map);
}

/// Provides utility functions without any side effects.
class AppLocaleUtils extends BaseAppLocaleUtils<AppLocale, Translations> {
	AppLocaleUtils._() : super(baseLocale: _baseLocale, locales: AppLocale.values, buildConfig: _buildConfig);

	static final instance = AppLocaleUtils._();

	// static aliases (checkout base methods for documentation)
	static AppLocale parse(String rawLocale) => instance.parse(rawLocale);
	static AppLocale parseLocaleParts({required String languageCode, String? scriptCode, String? countryCode}) => instance.parseLocaleParts(languageCode: languageCode, scriptCode: scriptCode, countryCode: countryCode);
	static AppLocale findDeviceLocale() => instance.findDeviceLocale();
	static List<Locale> get supportedLocales => instance.supportedLocales;
	static List<String> get supportedLocalesRaw => instance.supportedLocalesRaw;
	static Translations buildWithOverrides({required AppLocale locale, required FileType fileType, required String content, PluralResolver? cardinalResolver, PluralResolver? ordinalResolver}) => instance.buildWithOverrides(locale: locale, fileType: fileType, content: content, cardinalResolver: cardinalResolver, ordinalResolver: ordinalResolver);
	static Translations buildWithOverridesFromMap({required AppLocale locale, required bool isFlatMap, required Map map, PluralResolver? cardinalResolver, PluralResolver? ordinalResolver}) => instance.buildWithOverridesFromMap(locale: locale, isFlatMap: isFlatMap, map: map, cardinalResolver: cardinalResolver, ordinalResolver: ordinalResolver);
}

// translations

// Path: <root>
class Translations implements BaseTranslations<AppLocale, Translations> {
	/// Returns the current translations of the given [context].
	///
	/// Usage:
	/// final texts = Translations.of(context);
	static Translations of(BuildContext context) => InheritedLocaleData.of<AppLocale, Translations>(context).translations;

	/// You can call this constructor and build your own translation instance of this locale.
	/// Constructing via the enum [AppLocale.build] is preferred.
	/// [AppLocaleUtils.buildWithOverrides] is recommended for overriding.
	Translations.build({Map<String, Node>? overrides, PluralResolver? cardinalResolver, PluralResolver? ordinalResolver})
		: $meta = TranslationMetadata(
		    locale: AppLocale.en,
		    overrides: overrides ?? {},
		    cardinalResolver: cardinalResolver,
		    ordinalResolver: ordinalResolver,
		  ) {
		$meta.setFlatMapFunction(_flatMapFunction);
	}

	/// Metadata for the translations of <en>.
	@override final TranslationMetadata<AppLocale, Translations> $meta;

	/// Access flat map
	dynamic operator[](String key) => $meta.getTranslation(key);

	late final Translations _root = this; // ignore: unused_field

	// Translations
	late final _TranslationsCarrierEn carrier = _TranslationsCarrierEn._(_root);
	late final _TranslationsCommonsEn commons = _TranslationsCommonsEn._(_root);
	late final _TranslationsCheckInEn check_in = _TranslationsCheckInEn._(_root);
}

// Path: carrier
class _TranslationsCarrierEn {
	_TranslationsCarrierEn._(this._root);

	final Translations _root; // ignore: unused_field

	// Translations
	String get title => TranslationOverrides.string(_root.$meta, 'carrier.title', {}) ?? 'Carrier Selection';
	String get station => TranslationOverrides.string(_root.$meta, 'carrier.station', {}) ?? 'Station';
	String get selectCarrier => TranslationOverrides.string(_root.$meta, 'carrier.selectCarrier', {}) ?? 'Select Carrier';
	String get carrier => TranslationOverrides.string(_root.$meta, 'carrier.carrier', {}) ?? 'Carrier';
}

// Path: commons
class _TranslationsCommonsEn {
	_TranslationsCommonsEn._(this._root);

	final Translations _root; // ignore: unused_field

	// Translations
	String get dashboard => TranslationOverrides.string(_root.$meta, 'commons.dashboard', {}) ?? 'Dashboard';
	String get menu => TranslationOverrides.string(_root.$meta, 'commons.menu', {}) ?? 'Menu';
	String get settings => TranslationOverrides.string(_root.$meta, 'commons.settings', {}) ?? 'Settings';
	Map<String, String> get language => TranslationOverrides.map(_root.$meta, 'commons.language') ?? {
		'en': 'English',
		'es': 'Spanish',
	};
	String get noData => TranslationOverrides.string(_root.$meta, 'commons.noData', {}) ?? 'No Data';
	String get unexpectedError => TranslationOverrides.string(_root.$meta, 'commons.unexpectedError', {}) ?? 'Unexpected error';
	String get cancel => TranslationOverrides.string(_root.$meta, 'commons.cancel', {}) ?? 'Cancel';
	String get undo => TranslationOverrides.string(_root.$meta, 'commons.undo', {}) ?? 'Undo';
	String get continues => TranslationOverrides.string(_root.$meta, 'commons.continues', {}) ?? 'Continue';
	String get delete => TranslationOverrides.string(_root.$meta, 'commons.delete', {}) ?? 'Delete';
	String get seat => TranslationOverrides.string(_root.$meta, 'commons.seat', {}) ?? 'Seat';
	String get name => TranslationOverrides.string(_root.$meta, 'commons.name', {}) ?? 'Name';
	String get notAssigned => TranslationOverrides.string(_root.$meta, 'commons.notAssigned', {}) ?? 'Not Assigned';
}

// Path: check_in
class _TranslationsCheckInEn {
	_TranslationsCheckInEn._(this._root);

	final Translations _root; // ignore: unused_field

	// Translations
	String get selectAllPassengers => TranslationOverrides.string(_root.$meta, 'check_in.selectAllPassengers', {}) ?? 'Select all passengers';
}

// Path: <root>
class _TranslationsEs extends Translations {
	/// You can call this constructor and build your own translation instance of this locale.
	/// Constructing via the enum [AppLocale.build] is preferred.
	/// [AppLocaleUtils.buildWithOverrides] is recommended for overriding.
	_TranslationsEs.build({Map<String, Node>? overrides, PluralResolver? cardinalResolver, PluralResolver? ordinalResolver})
		: $meta = TranslationMetadata(
		    locale: AppLocale.es,
		    overrides: overrides ?? {},
		    cardinalResolver: cardinalResolver,
		    ordinalResolver: ordinalResolver,
		  ),
		  super.build(cardinalResolver: cardinalResolver, ordinalResolver: ordinalResolver) {
		super.$meta.setFlatMapFunction($meta.getTranslation); // copy base translations to super.$meta
		$meta.setFlatMapFunction(_flatMapFunction);
	}

	/// Metadata for the translations of <es>.
	@override final TranslationMetadata<AppLocale, Translations> $meta;

	/// Access flat map
	@override dynamic operator[](String key) => $meta.getTranslation(key) ?? super.$meta.getTranslation(key);

	@override late final _TranslationsEs _root = this; // ignore: unused_field

	// Translations
	@override late final _TranslationsCarrierEs carrier = _TranslationsCarrierEs._(_root);
	@override late final _TranslationsCommonsEs commons = _TranslationsCommonsEs._(_root);
	@override late final _TranslationsCheckInEs check_in = _TranslationsCheckInEs._(_root);
}

// Path: carrier
class _TranslationsCarrierEs extends _TranslationsCarrierEn {
	_TranslationsCarrierEs._(_TranslationsEs root) : this._root = root, super._(root);

	@override final _TranslationsEs _root; // ignore: unused_field

	// Translations
	@override String get title => TranslationOverrides.string(_root.$meta, 'carrier.title', {}) ?? 'Selección de Aerolínea';
	@override String get station => TranslationOverrides.string(_root.$meta, 'carrier.station', {}) ?? 'Estación';
	@override String get selectCarrier => TranslationOverrides.string(_root.$meta, 'carrier.selectCarrier', {}) ?? 'Seleccionar Aerolínea';
	@override String get carrier => TranslationOverrides.string(_root.$meta, 'carrier.carrier', {}) ?? 'Aerolínea';
}

// Path: commons
class _TranslationsCommonsEs extends _TranslationsCommonsEn {
	_TranslationsCommonsEs._(_TranslationsEs root) : this._root = root, super._(root);

	@override final _TranslationsEs _root; // ignore: unused_field

	// Translations
	@override String get dashboard => TranslationOverrides.string(_root.$meta, 'commons.dashboard', {}) ?? 'Panel';
	@override String get menu => TranslationOverrides.string(_root.$meta, 'commons.menu', {}) ?? 'Menu';
	@override String get settings => TranslationOverrides.string(_root.$meta, 'commons.settings', {}) ?? 'Ajustes';
	@override Map<String, String> get language => TranslationOverrides.map(_root.$meta, 'commons.language') ?? {
		'en': 'Ingles',
		'es': 'Español',
	};
	@override String get noData => TranslationOverrides.string(_root.$meta, 'commons.noData', {}) ?? 'No hay pasajeros';
	@override String get unexpectedError => TranslationOverrides.string(_root.$meta, 'commons.unexpectedError', {}) ?? 'Error inesperado';
	@override String get cancel => TranslationOverrides.string(_root.$meta, 'commons.cancel', {}) ?? 'Cancelar';
	@override String get undo => TranslationOverrides.string(_root.$meta, 'commons.undo', {}) ?? 'Deshacer';
	@override String get continues => TranslationOverrides.string(_root.$meta, 'commons.continues', {}) ?? 'Continuar';
	@override String get delete => TranslationOverrides.string(_root.$meta, 'commons.delete', {}) ?? 'Borrar';
	@override String get seat => TranslationOverrides.string(_root.$meta, 'commons.seat', {}) ?? 'Asiento';
	@override String get name => TranslationOverrides.string(_root.$meta, 'commons.name', {}) ?? 'Nombre';
	@override String get notAssigned => TranslationOverrides.string(_root.$meta, 'commons.notAssigned', {}) ?? 'No asignado';
}

// Path: check_in
class _TranslationsCheckInEs extends _TranslationsCheckInEn {
	_TranslationsCheckInEs._(_TranslationsEs root) : this._root = root, super._(root);

	@override final _TranslationsEs _root; // ignore: unused_field

	// Translations
	@override String get selectAllPassengers => TranslationOverrides.string(_root.$meta, 'check_in.selectAllPassengers', {}) ?? 'Seleccionar todos los pasajeros';
}

/// Flat map(s) containing all translations.
/// Only for edge cases! For simple maps, use the map function of this library.

extension on Translations {
	dynamic _flatMapFunction(String path) {
		switch (path) {
			case 'carrier.title': return TranslationOverrides.string(_root.$meta, 'carrier.title', {}) ?? 'Carrier Selection';
			case 'carrier.station': return TranslationOverrides.string(_root.$meta, 'carrier.station', {}) ?? 'Station';
			case 'carrier.selectCarrier': return TranslationOverrides.string(_root.$meta, 'carrier.selectCarrier', {}) ?? 'Select Carrier';
			case 'carrier.carrier': return TranslationOverrides.string(_root.$meta, 'carrier.carrier', {}) ?? 'Carrier';
			case 'commons.dashboard': return TranslationOverrides.string(_root.$meta, 'commons.dashboard', {}) ?? 'Dashboard';
			case 'commons.menu': return TranslationOverrides.string(_root.$meta, 'commons.menu', {}) ?? 'Menu';
			case 'commons.settings': return TranslationOverrides.string(_root.$meta, 'commons.settings', {}) ?? 'Settings';
			case 'commons.language.en': return TranslationOverrides.string(_root.$meta, 'commons.language.en', {}) ?? 'English';
			case 'commons.language.es': return TranslationOverrides.string(_root.$meta, 'commons.language.es', {}) ?? 'Spanish';
			case 'commons.noData': return TranslationOverrides.string(_root.$meta, 'commons.noData', {}) ?? 'No Data';
			case 'commons.unexpectedError': return TranslationOverrides.string(_root.$meta, 'commons.unexpectedError', {}) ?? 'Unexpected error';
			case 'commons.cancel': return TranslationOverrides.string(_root.$meta, 'commons.cancel', {}) ?? 'Cancel';
			case 'commons.undo': return TranslationOverrides.string(_root.$meta, 'commons.undo', {}) ?? 'Undo';
			case 'commons.continues': return TranslationOverrides.string(_root.$meta, 'commons.continues', {}) ?? 'Continue';
			case 'commons.delete': return TranslationOverrides.string(_root.$meta, 'commons.delete', {}) ?? 'Delete';
			case 'commons.seat': return TranslationOverrides.string(_root.$meta, 'commons.seat', {}) ?? 'Seat';
			case 'commons.name': return TranslationOverrides.string(_root.$meta, 'commons.name', {}) ?? 'Name';
			case 'commons.notAssigned': return TranslationOverrides.string(_root.$meta, 'commons.notAssigned', {}) ?? 'Not Assigned';
			case 'check_in.selectAllPassengers': return TranslationOverrides.string(_root.$meta, 'check_in.selectAllPassengers', {}) ?? 'Select all passengers';
			default: return null;
		}
	}
}

extension on _TranslationsEs {
	dynamic _flatMapFunction(String path) {
		switch (path) {
			case 'carrier.title': return TranslationOverrides.string(_root.$meta, 'carrier.title', {}) ?? 'Selección de Aerolínea';
			case 'carrier.station': return TranslationOverrides.string(_root.$meta, 'carrier.station', {}) ?? 'Estación';
			case 'carrier.selectCarrier': return TranslationOverrides.string(_root.$meta, 'carrier.selectCarrier', {}) ?? 'Seleccionar Aerolínea';
			case 'carrier.carrier': return TranslationOverrides.string(_root.$meta, 'carrier.carrier', {}) ?? 'Aerolínea';
			case 'commons.dashboard': return TranslationOverrides.string(_root.$meta, 'commons.dashboard', {}) ?? 'Panel';
			case 'commons.menu': return TranslationOverrides.string(_root.$meta, 'commons.menu', {}) ?? 'Menu';
			case 'commons.settings': return TranslationOverrides.string(_root.$meta, 'commons.settings', {}) ?? 'Ajustes';
			case 'commons.language.en': return TranslationOverrides.string(_root.$meta, 'commons.language.en', {}) ?? 'Ingles';
			case 'commons.language.es': return TranslationOverrides.string(_root.$meta, 'commons.language.es', {}) ?? 'Español';
			case 'commons.noData': return TranslationOverrides.string(_root.$meta, 'commons.noData', {}) ?? 'No hay pasajeros';
			case 'commons.unexpectedError': return TranslationOverrides.string(_root.$meta, 'commons.unexpectedError', {}) ?? 'Error inesperado';
			case 'commons.cancel': return TranslationOverrides.string(_root.$meta, 'commons.cancel', {}) ?? 'Cancelar';
			case 'commons.undo': return TranslationOverrides.string(_root.$meta, 'commons.undo', {}) ?? 'Deshacer';
			case 'commons.continues': return TranslationOverrides.string(_root.$meta, 'commons.continues', {}) ?? 'Continuar';
			case 'commons.delete': return TranslationOverrides.string(_root.$meta, 'commons.delete', {}) ?? 'Borrar';
			case 'commons.seat': return TranslationOverrides.string(_root.$meta, 'commons.seat', {}) ?? 'Asiento';
			case 'commons.name': return TranslationOverrides.string(_root.$meta, 'commons.name', {}) ?? 'Nombre';
			case 'commons.notAssigned': return TranslationOverrides.string(_root.$meta, 'commons.notAssigned', {}) ?? 'No asignado';
			case 'check_in.selectAllPassengers': return TranslationOverrides.string(_root.$meta, 'check_in.selectAllPassengers', {}) ?? 'Seleccionar todos los pasajeros';
			default: return null;
		}
	}
}
